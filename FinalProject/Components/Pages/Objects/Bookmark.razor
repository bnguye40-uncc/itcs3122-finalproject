@page "/bookmark"
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

<!-- CSS -->
<style>
    .tags-list {
        list-style: none;
        padding-left: 0;
        display: flex;
        flex-direction: row;
        width: fit-content;
        gap: 1em;
        > li {
            font-size: small;
            border: solid 1px;
            border-radius: 5px;
            padding: 3px;
        }
    }
    .fields-list {
        list-style: none;
        padding-left: 0;
    }
    .hidden {
        display: none;
    }
</style>

<!-- Component -->
<div class="bookmark">
    <div class="bookmark-header">
        <Field Class="name" Name="Name" Value=@Name Placeholder="Website name..." />
    </div>
    <div class="bookmark-contents">

        <Field Class="url" Name="URL" Value=@URL Placeholder="Paste URL here..." />

        <Field Class="keyword" Name="Keyword" Value=@Keyword Placeholder="Add a keyword..."/>

        <Field Class="description" Name="Description" Value=@Description Placeholder="Write a short description here..."/>

        <div class="custom-fields-list">
            @foreach (var field in CustomFields)
            {  
                <Field Class="custom-field" Name="@field.Name" />
            }
        </div>

        <ul class="tags-list">
            @foreach (var tag in Tags)
            {  
                <li>@tag</li>
            }
        </ul>

        <div class="template">
            <select class="custom-templates-selector" id="templatesSelector" value="@CustomTemplate">
                <option selected disabled>Choose Template</option>
                @if (AllTemplates.Any())
                    @foreach (var template in AllTemplates)
                    {
                        <option value="@template">@template.Name</option>
                    }
            </select>
            <button class="set-template-button">Set as Template</button>
        </div>

    </div>
</div>

<!-- C# -->
@code {
    [CascadingParameter]
    public List<Template>? AllTemplates { get; set; }
    
    protected override void OnInitialized()
    {
        localStorage.SetItem(Name, this);
        var bookmark = localStorage.GetItem<Bookmark>(Name);
    }

}