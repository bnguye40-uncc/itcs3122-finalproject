@inherits AbstractFolderItem

<!-- CSS -->
<style>
    .bookmark-header {
        display: flex;
        flex-direction: row;
    }

    .custom-field-container {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
    }

    .hidden {
        display: none;
    }

    * .selected-True {
        background-color: lightgray;
    }
</style>

<!-- Component -->
@if (DisplayAsFolderItem) {
    <span class="bookmark-item-heading">
        <span class="display @showDisplay">
            <NavLink class=@Class onClick="">
                @Name
            </NavLink>
            <button class="edit-folder-item" @onclick="ToggleEditMode">Edit</button>
        </span>
        <span class="editing @showEditing">
            <input placeholder="Bookmark Name..." @bind="@newName"/>
            <button @onclick="SetValue">Done</button>
        </span>
    </span>
}
else
{
    <div class="bookmark">
        <div class="bookmark-header">
            <Field Class="name" Name="Name" Value=@Name Placeholder="Website name..." />
        </div>
        <div class="bookmark-contents">

            <Field Class="url" Name="URL" Value=@URL Placeholder="Paste URL here..." />

            <Field Class="keyword" Name="Keyword" Value=@Keyword Placeholder="Add a keyword..."/>

            <Field Class="description" Name="Description" Value=@Description Placeholder="Write a short description here..."/>

            <div class="custom-fields-list">
                @for (int i = 0; i < CustomFields.Count; i++)
                {  
                    var index = i;
                    <div class="custom-field-container">
                        <Field Index="@index" Class="custom-field" Name="@CustomFields[index].Name" />
                        <button @onclick="@(e => DeleteField(index))">X</button>
                    </div>
                }
                <button class="add-field" @onclick="AddField">Add Field</button>
            </div>

        </div>
    </div>
}

<!-- C# -->
@code {
    private string showDisplay = "";
    private string showEditing = "hidden";
    private string newName = "";

    protected override void OnInitialized()
    {
        newName = Name;
    }

    // Toggle editing for folder item
    private void ToggleEditMode() {
        showDisplay = showDisplay == string.Empty ? "hidden" : "";
        showEditing = showEditing == string.Empty ? "hidden" : "";
    }

    // Set name after editing finished.
    private void SetValue() {
        if (newName != string.Empty) { Name = newName; }
        else { Name = "Untitled"; }
        ToggleEditMode();
    }

    private void AddField() {
        CustomFields.Add(new Field());
    }

    private void DeleteField(int index) {
        CustomFields.RemoveAt(index);
    }
}