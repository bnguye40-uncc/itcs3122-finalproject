@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inherits AbstractFolderItem

<!-- CSS -->
<style>
    .folder-items-list {
        padding: 0px;
        margin: 0px 0px 0px 1em;
    }

    .item:hover {
        background-color: lightgray;
        border: solid 1px darkgray;
    }

    .delete-item {
        float: right;
    }
</style>

<!-- Component -->
<span class="folder-heading">
    <span class="display @showDisplay">
        <NavLink class="@($"{Class}")" @onclick="Expand">
            @Name
        </NavLink>
        <button class="edit-folder-item" @onclick="ToggleEditMode">Edit</button>
    </span>
    <span class="editing @showEditing">
        <input placeholder="Folder Name..." @bind="@newName"/>
        <button @onclick="SetValue">Done</button>
    </span>
    <button class="add-bookmark" @onclick="AddBookmark">ABM</button>
    <button class="add-folder" @onclick="AddFolder">AF</button>
</span>

<ul class="@($"folder-items-list {expandFolder}")">
@for (int i = 0; i < Items.Count; i++) {

    var index = i;

    <li class="@($"item")">
        <div @key="Items[index]" class="item-container">
            <button class="delete-item" @onclick="@(e => DeleteItem(index))">X</button>
            <CascadingValue Value="_MainLayout">
                @if (Items[index].IsFolder()) {
                    <Folder @bind-Name="Items[index].Name" @bind-Items="((Folder)Items[index]).Items" />
                } else {
                    <Bookmark @bind-Name="Items[index].Name" DisplayAsFolderItem=true />
                }
            </CascadingValue>
        </div>
    </li>
}
</ul>