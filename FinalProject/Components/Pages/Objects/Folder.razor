@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inherits AbstractFolderItem

<!-- CSS -->
<style>
    .folder-items-list {
        padding: 0px;
        margin: 0px 0px 0px 1em;
    }
    
    .folder-item {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
    }
    
    * .selected-True {
        background-color: lightgray;
    }
</style>

<!-- Component -->
<span class="folder-heading">
    <span class="display @showDisplay">
        <NavLink class="@($"folder {Class}")" @onclick="Expand">
            @Name
        </NavLink>
        <button class="edit-folder-item" @onclick="ToggleEditMode">Edit</button>
    </span>
    <span class="editing @showEditing">
        <input placeholder="Folder Name..." @bind="@newName"/>
        <button @onclick="SetValue">Done</button>
    </span>
    <button class="add-bookmark" @onclick="AddBookmark">ABM</button>
    <button class="add-folder" @onclick="AddFolder">AF</button>
</span>

<ul class="@($"folder-items-list {expandFolder}")">
@foreach (var item in Items) {
    <li class="@($"item selected-{item.IsSelected}")">
    @if (item.IsFolder == true)
    {
        <div>
            <input type="checkbox" @bind-value="@item.IsSelected" >
            <Folder Class="subfolder" Name="@item.Name" Description="@item.Description" />
        </div>
    }
    else
    {
        <div>
            <input type="checkbox" @bind-value="@item.IsSelected" >
            <Bookmark Class="@item.Class" Name="@item.Name" Description="@item.Description" DisplayAsFolderItem=true />
        </div>
    }
    </li>
}
</ul>

<!-- C# -->
@code {
    private string showDisplay = "";
    private string showEditing = "hidden";
    private string newName = "";
    private string expandFolder = "";
    private bool isExpanded = true;

    protected override void OnInitialized()
    {
        newName = Name;
    }

    // Expand folder
    private void Expand() {
        if (Class == "root") { return; }
        isExpanded = !isExpanded;
        expandFolder = isExpanded ? "" : "hidden";
    }

    // Add bookmark
    private void AddBookmark() {
        Items.Add(new Bookmark());
    }

    // Add folder
    private void AddFolder() {
        Items.Add(new Folder());
    }

    // Toggle editing
    private void ToggleEditMode() {
        showDisplay = showDisplay == string.Empty ? "hidden" : "";
        showEditing = showEditing == string.Empty ? "hidden" : "";
    }

    // Set value after editing
    private void SetValue() {
        if (newName != string.Empty) { Name = newName; }
        else { Name = "Untitled"; }
        ToggleEditMode();
    }
}